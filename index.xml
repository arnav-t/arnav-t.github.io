<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arnav Tiwari</title>
    <link>https://arnav-t.github.io/</link>
    <description>Recent content on Arnav Tiwari</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Sep 2020 02:19:18 +0530</lastBuildDate><atom:link href="https://arnav-t.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://arnav-t.github.io/about/</link>
      <pubDate>Wed, 16 Dec 2020 02:45:24 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/about/</guid>
      <description>Hello! I&amp;rsquo;m Arnav Tiwari, an undergraduate engineering student at the Indian Institute of Technology, Kharagpur. I&amp;rsquo;m an autodidactic software developer by trade. What kind? I&amp;rsquo;m figuring it out as I go! I love to build things and tinker with technology as much as the next hobbyist. Feel free to reach out to me at my email or any other social media, I love to collaborate!</description>
    </item>
    
    <item>
      <title>Google Summer of Code 2020</title>
      <link>https://arnav-t.github.io/posts/gsoc20/</link>
      <pubDate>Tue, 15 Sep 2020 02:19:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/gsoc20/</guid>
      <description>My experience as a student developer at Matrix in Google Summer of Code This was my first experience with Google Summer of Code. For the past few months, I had been working on a project to develop an HTML embeddable chat client under the GSoC program for Matrix. Matrix provides a highly versatile SDK for making custom clients that can be leveraged for a variety of applications, one of which is using Matrix to power an embeddable chat client.</description>
    </item>
    
    <item>
      <title>Simulating birds in your browser</title>
      <link>https://arnav-t.github.io/posts/boids/</link>
      <pubDate>Thu, 30 Apr 2020 02:19:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/boids/</guid>
      <description>Boids: simulating the flocking behavior of birds  Bird-oid objects or &amp;ldquo;boids&amp;rdquo; for short is a simple way to simulate the flocking behavior of birds using some simple rules. Boids exhibit emergent behavior (similar to pursuit curves) which means that the complexity of Boids arises from the interaction of many boids together adhering to a set of simple rules.
A typical simulation has three main rules:
 Separation: boids try to avoid colliding with each other.</description>
    </item>
    
    <item>
      <title>Discovering Open SMTP Relays</title>
      <link>https://arnav-t.github.io/posts/smtp/</link>
      <pubDate>Thu, 14 Nov 2019 01:06:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/smtp/</guid>
      <description>A simple way to discover Open SMTP Relays in the wild Disclaimer: This article is for educational purposes only.
What is SMTP? SMTP is an ancient protocol used for email transmission. As with most ancient protocols, it is relatively simple in design. SMTP works on plaintext only which makes it very easy to play around with.
What are SMTP Relays? SMTP Relays are like your local post office. They take your mail, figure out where to send it (in this case using DNS), and send it either to another post office along the way or directly to your intended recipient if possible.</description>
    </item>
    
    <item>
      <title>Pursuit Curves</title>
      <link>https://arnav-t.github.io/posts/pursuit/</link>
      <pubDate>Fri, 14 Dec 2018 02:19:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/pursuit/</guid>
      <description>Generating interesting patterns using pursuit curves  Let&amp;rsquo;s say we have a point A traveling on an arbitrary path and another point B pursuing point A such that its velocity is always directed towards point A. The path traced by point B is called a pursuit curve. The tangent of the pursuit curve will always pass through the pursuee&amp;rsquo;s position at that moment of time.
With this simple rule, nothing special happens if the pursuee is just traveling on a fixed path with a constant velocity.</description>
    </item>
    
    <item>
      <title>Turning a profit on Steam using Python</title>
      <link>https://arnav-t.github.io/posts/hatbot/</link>
      <pubDate>Tue, 03 Jul 2018 02:19:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/hatbot/</guid>
      <description>Flipping Team Fortress 2 hats using Python to turn a profit Team Fortress 2 is a great example of a game that has stood the test of time. The TF2 community has been active since 2007 but it really got popular when Valve introduced tradable hats in 2009. With these cosmetic items, an in-game economy was born. These items were randomly dropped in-game or unboxed randomly by unlocking a crate using a key.</description>
    </item>
    
    <item>
      <title>Navigating 2D objects using 3D configuration spaces</title>
      <link>https://arnav-t.github.io/posts/3dastar/</link>
      <pubDate>Fri, 09 Mar 2018 01:06:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/3dastar/</guid>
      <description>Using 3D configuration spaces for navigating 2D objects with A* pathfinding algorithm Pathfinding is a very interesting problem. There are already many popular algorithms for finding a path from point A to B such as Dijkstra&amp;rsquo;s algorithm and A* algorithm. However, they operate on the assumption that your path can *squeeze* through the smallest of gaps. Clearly, this would be a problem if you wanted to find a path for a finite object.</description>
    </item>
    
    <item>
      <title>Soft-body physics using springs</title>
      <link>https://arnav-t.github.io/posts/softbody/</link>
      <pubDate>Sat, 21 Mar 2015 02:19:18 +0530</pubDate>
      
      <guid>https://arnav-t.github.io/posts/softbody/</guid>
      <description>Simulating soft-bodies using springs   Soft-bodies are fun to play around with. It is quite satisfying to throw around a soft-body in a simulation and watch the seemingly complicated behavior that unfolds.
However, the truth is, soft-bodies are far simpler to simulate than rigid bodies. Rigid bodies require more involved impulse calculations whereas a simple convex-rigid body simulation can just be approximated using point-to-point interactions. This can be simplified much further when the interactions are between a plane and a body, in fact, the body doesn&amp;rsquo;t even need to convex anymore.</description>
    </item>
    
  </channel>
</rss>
